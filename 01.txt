운영체제란 컴퓨팅 자원을 효율적으로 관리해서 사용자에게 제공하는 서비스

운영체제가 관리하는 하드웨어
1. 프로세서 : 계산 하는 녀석 (cpu, gpu 등)
2. 메모리 : 저장 하는 녀석 (램, 디스크)
3. 주변장치 : 키보드, 마우스, 모니터, 프린터, 네트워크 모뎀 등


프로세서
컴퓨터의 모든 장치의 동작 제어
- 레지스터 = 메모리, 프로세서 내부에 있는 메모리, 컴퓨터에서 가장 빠른 메모리
- 레지스터의 종류 : 용도에 따른 분류 - 전용 레지스터, 범용 레지스터
		 변경 가능 여부에 따른 분류 - 사용자 가시 / 불가시
		 저장하는 정보의 종류 - 데이터 레지스터 / 주소 레지스터 / ...

운영체제는 프로세서에게 처리할 작업 할당 및 관리한다.
- 프로세스 생성 및 관리

그리고 프로그램의 프로세서 사용을 제어한다.
- 프로그램의 프로세서 사용 시간 관리, 복수 프로그램간 사용 시간 조율 등



메모리
데이터를 저장하는 장치, 프로그램 / 사용자 데이터 등을 저장함
메모리의 종류 - 레지스터/캐시/메인메모리(DRAM)/보조기억장치(HDD)
계층을 나눠 놓은 이유. 가성비를 위해 각각의 역할을 부여.

주기억장치. dRam ddr4 프로세서가 수행할 프로그램과 데이터를 저장함.
왜 디스크에서 바로 안갖다쓰고 메인메모리를 거쳐가는가?
디스크 속도는 느리게 발전, cpu속도는 압도적으로 발전. 갭이 발생
간극을 줄일 방법으로 사이즈는 작지만 속도는 빠른 램을 사용하자는 아이디어로 도입됨.
즉 디스크 입출력 병목 해소


캐시
레지스터와 마찬가지로 cpu에 들어가 있음.
프로세서 내부에 있는 메모리(L1, L2 캐시 등)
메인 메모리와 cpu의 간극을 줄이기 위해 캐시를 사용.

캐시 히트 / 캐시 미스
캐시 미스가 나면 바로 주기억장치로 가는게 나은데 오히려 손해.
128키로바이트로 캐시히트의 효율만 얻을 수 있을까?
-> 지역성(Locality) : 공간적 지역성: 참조한 주소와 인접한 주소를 참조하는 특성, 순차적 프로그램 수행
		  시간적 지역성: 한 번 참조한 주소를 곧 다시 참조하는 특성, For문 등의 루프문
		   -> 지역성은 캐시 적중률(cache hit ratio)과 밀접하다. 알고리즘 성능 향상 위한 중요한 요소 중 하나
			캐시는 캐시라인, 혹은 캐시 블록이라는 형태로 그 특정 데이터만 말고 그 근처도 가져옴
for (i = 0; i<=n; i++){
	for (j=0; j<m; j++{
		x = x + (a[i][j]); // case A
			or
		x = x + (a[j][i]); // case B
	}
}
어느 걸 선택할 것인가? case A. a[0][0~15] 를 가져오는데 a[1][0~15]를 가져오면 miss가 나기 때문
A는 총 15번의 hit가 난다.


보조기억장치 (hdd, ssd, usb, cd dvd, sd카드)
주변장치로 분류됨. 메모리는 프로세서가 직접 접근할 수 있으나 디스크는 접근할 수 없다.
하드디스크의 일부를 메모리처럼 사용하는 가상메모리도 있다.



시스템 버스
다양한 하드웨어들이 데이터 및 신호를 주고 받는 물리적인 통로.
1. 제어 버스, 2. 주소 버스, 3. 데이터 버스


